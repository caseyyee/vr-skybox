html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  background: #000;
  overflow: hidden;
  font-family: 'Fira Sans', sans-serif;
  font-weight: 300;
  font-style: normal;
  font-size: 5pt;
  
}


// splash
#splash {
  width: 100%;
  height: 100%;
  top: 0px;
  left: 0px;
  position: absolute;
  background: linear-gradient(to bottom, #fff8d6 64%,#fffbed 100%);
  display: flex;
  align-items: center;
  justify-content: center;
}

.splash-title {
  max-width: 50%;

  h1 {
    font-size: 120px;
    font-weight: 100;
    margin: 0;
    padding: 0;
    text-align: center;
    color: #7BE19A;
  }

  h2 {
    font-size: 25px;
    font-weight: 300;
    margin: 0 0 70px 0;
    padding: 0;
    text-align: center;
    text-transform: uppercase;
    color: #7e7e7e;
  }
}
.splash-key-container {
  margin: 10px;
}
.splash-key {
  border: none;
  width: 50px;
  height: 50px;
  font-size: 20px;
  color: #fff;
  background: #EA6044;
  margin: 2px;
}
.splash-key-label {
  font-size: 20px;
  font-weight: 100;
  margin: 20px;
}


#container {
}

#container:not(:-moz-full-screen) {
  /* this is just to move the scene to the visible area when not in fullscreen VR */
  // transform: translate(300px, 300px) rotateX(180deg);
  transform: translate(50%, 50%);
  border: 1px solid red;
  height: 100%;
  perspective: 1800px;
}

/* All threed-class elements have preserve-3d; preserve-3d is NOT inherited.  (There's an open
 * discussion on w3-style about adding a new transform-style that is like preserve-3d but is
 * inherited.)
 *
 * position: absolute; and 0,0 is also set because we'll position these elements fully using
 * 3D transforms.  Their CSS position is irrelevant for us.  Without this, their CSS position
 * will come into play as well as their transform.
 *
 * When in fullscreen VR, the 0,0,0 position is at the center of the viewport and not the top
 * left.
 *
 * We don't modify the original transform-origin here (50% 50% 0), because that can be useful
 * for moving elements around by their center point.  But it could also be set to 0,0,0 to
 * make it completely clear exactly where/how 3D objects are moving.
 */

.threed {
  transform-style: preserve-3d;
  position: absolute;
  top: 0; left: 0;
}

/* The camera div just serves as a way to set up a modelview transform for the entire rest of the
 * scene.  The transform that's set on it needs to be the *inverse* of where you want the camera
 * to be; that is, if you want the camera to be at (0, 0, 500), then the transform needs to be
 * set to (0, 0, -500).  The transform-origin is set here because we want to go from the origin
 */
#camera {
  transform-origin: 0 0 0;
  /* the transform itself is set programatically, since it needs to take into account the HMD orientation */
  border: 5px solid blue;
}


// Skybox
$skybox-size: 800px;
$skybox-inset: 4px; // how many pixels inset to hide seams in skybox.

#sky {
  width: $skybox-size;
  height: $skybox-size;
  transform: translate(-50%,-50%);
}

.skybox-side {
  width: $skybox-size+($skybox-inset*2);
  height: $skybox-size+($skybox-inset*2);
  background-size: 100% 100%;
  text-align: center;
}
.skybox-front {
  transform: translate3d(0,0,($skybox-size/2*-1)+$skybox-inset);
}
.skybox-left {
  transform: translate3d(($skybox-size/2*-1)+$skybox-inset,0,0) rotateY(90deg);
}
.skybox-right {
  transform: translate3d(($skybox-size/2)-$skybox-inset,0,0) rotateY(-90deg);
}
.skybox-back {
  transform: translate3d(0,0,($skybox-size/2)-$skybox-inset) rotateY(180deg);
}
.skybox-bottom {
  transform: translate3d(0,($skybox-size/2)-$skybox-inset,0) rotateX(90deg);
}
.skybox-top {
  transform: translate3d(0,($skybox-size/2*-1)-$skybox-inset,0) rotateX(-90deg);
}



//  helper classes
.is-hidden {
  display: none!important;
}
